// source: SweepstakeService.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.footyandsweep.BigDecimal', null, global);
goog.exportSymbol('proto.com.footyandsweep.BigInteger', null, global);
goog.exportSymbol('proto.com.footyandsweep.JoinCode', null, global);
goog.exportSymbol('proto.com.footyandsweep.Map', null, global);
goog.exportSymbol('proto.com.footyandsweep.Sweepstake', null, global);
goog.exportSymbol('proto.com.footyandsweep.SweepstakeId', null, global);
goog.exportSymbol('proto.com.footyandsweep.SweepstakeStatus', null, global);
goog.exportSymbol('proto.com.footyandsweep.SweepstakeTypeCommon', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.footyandsweep.Sweepstake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.footyandsweep.Sweepstake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.footyandsweep.Sweepstake.displayName = 'proto.com.footyandsweep.Sweepstake';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.footyandsweep.BigDecimal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.footyandsweep.BigDecimal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.footyandsweep.BigDecimal.displayName = 'proto.com.footyandsweep.BigDecimal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.footyandsweep.BigInteger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.footyandsweep.BigInteger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.footyandsweep.BigInteger.displayName = 'proto.com.footyandsweep.BigInteger';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.footyandsweep.JoinCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.footyandsweep.JoinCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.footyandsweep.JoinCode.displayName = 'proto.com.footyandsweep.JoinCode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.footyandsweep.SweepstakeId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.footyandsweep.SweepstakeId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.footyandsweep.SweepstakeId.displayName = 'proto.com.footyandsweep.SweepstakeId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.footyandsweep.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.footyandsweep.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.footyandsweep.Map.displayName = 'proto.com.footyandsweep.Map';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.footyandsweep.Sweepstake.prototype.toObject = function(opt_includeInstance) {
  return proto.com.footyandsweep.Sweepstake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.footyandsweep.Sweepstake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.Sweepstake.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    joincode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isprivate: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    ownerid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sweepstakeeventid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    sweepstaketype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    sweepstakelistsize: jspb.Message.getFieldWithDefault(msg, 10, 0),
    minimumplayers: jspb.Message.getFieldWithDefault(msg, 11, 0),
    maximumplayertickets: jspb.Message.getFieldWithDefault(msg, 12, 0),
    stake: (f = msg.getStake()) && proto.com.footyandsweep.BigDecimal.toObject(includeInstance, f),
    totalnumberoftickets: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.footyandsweep.Sweepstake}
 */
proto.com.footyandsweep.Sweepstake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.footyandsweep.Sweepstake;
  return proto.com.footyandsweep.Sweepstake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.footyandsweep.Sweepstake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.footyandsweep.Sweepstake}
 */
proto.com.footyandsweep.Sweepstake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJoincode(value);
      break;
    case 4:
      var value = /** @type {!proto.com.footyandsweep.SweepstakeStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsprivate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSweepstakeeventid(value);
      break;
    case 8:
      var value = /** @type {!proto.com.footyandsweep.SweepstakeTypeCommon} */ (reader.readEnum());
      msg.setSweepstaketype(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSweepstakelistsize(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinimumplayers(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaximumplayertickets(value);
      break;
    case 13:
      var value = new proto.com.footyandsweep.BigDecimal;
      reader.readMessage(value,proto.com.footyandsweep.BigDecimal.deserializeBinaryFromReader);
      msg.setStake(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalnumberoftickets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.footyandsweep.Sweepstake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.footyandsweep.Sweepstake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.footyandsweep.Sweepstake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.Sweepstake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJoincode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getIsprivate();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSweepstakeeventid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSweepstaketype();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getSweepstakelistsize();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getMinimumplayers();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getMaximumplayertickets();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getStake();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.com.footyandsweep.BigDecimal.serializeBinaryToWriter
    );
  }
  f = message.getTotalnumberoftickets();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.com.footyandsweep.Sweepstake.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
 */
proto.com.footyandsweep.Sweepstake.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.com.footyandsweep.Sweepstake.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
 */
proto.com.footyandsweep.Sweepstake.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string joinCode = 3;
 * @return {string}
 */
proto.com.footyandsweep.Sweepstake.prototype.getJoincode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
 */
proto.com.footyandsweep.Sweepstake.prototype.setJoincode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SweepstakeStatus status = 4;
 * @return {!proto.com.footyandsweep.SweepstakeStatus}
 */
proto.com.footyandsweep.Sweepstake.prototype.getStatus = function() {
  return /** @type {!proto.com.footyandsweep.SweepstakeStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.com.footyandsweep.SweepstakeStatus} value
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
 */
proto.com.footyandsweep.Sweepstake.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool isPrivate = 5;
 * @return {boolean}
 */
proto.com.footyandsweep.Sweepstake.prototype.getIsprivate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
 */
proto.com.footyandsweep.Sweepstake.prototype.setIsprivate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string ownerId = 6;
 * @return {string}
 */
proto.com.footyandsweep.Sweepstake.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
 */
proto.com.footyandsweep.Sweepstake.prototype.setOwnerid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string sweepstakeEventId = 7;
 * @return {string}
 */
proto.com.footyandsweep.Sweepstake.prototype.getSweepstakeeventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
 */
proto.com.footyandsweep.Sweepstake.prototype.setSweepstakeeventid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional SweepstakeTypeCommon sweepstakeType = 8;
 * @return {!proto.com.footyandsweep.SweepstakeTypeCommon}
 */
proto.com.footyandsweep.Sweepstake.prototype.getSweepstaketype = function() {
  return /** @type {!proto.com.footyandsweep.SweepstakeTypeCommon} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.com.footyandsweep.SweepstakeTypeCommon} value
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
 */
proto.com.footyandsweep.Sweepstake.prototype.setSweepstaketype = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional int32 sweepstakeListSize = 10;
 * @return {number}
 */
proto.com.footyandsweep.Sweepstake.prototype.getSweepstakelistsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
 */
proto.com.footyandsweep.Sweepstake.prototype.setSweepstakelistsize = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 minimumPlayers = 11;
 * @return {number}
 */
proto.com.footyandsweep.Sweepstake.prototype.getMinimumplayers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
 */
proto.com.footyandsweep.Sweepstake.prototype.setMinimumplayers = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 maximumPlayerTickets = 12;
 * @return {number}
 */
proto.com.footyandsweep.Sweepstake.prototype.getMaximumplayertickets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
 */
proto.com.footyandsweep.Sweepstake.prototype.setMaximumplayertickets = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional BigDecimal stake = 13;
 * @return {?proto.com.footyandsweep.BigDecimal}
 */
proto.com.footyandsweep.Sweepstake.prototype.getStake = function() {
  return /** @type{?proto.com.footyandsweep.BigDecimal} */ (
    jspb.Message.getWrapperField(this, proto.com.footyandsweep.BigDecimal, 13));
};


/**
 * @param {?proto.com.footyandsweep.BigDecimal|undefined} value
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
*/
proto.com.footyandsweep.Sweepstake.prototype.setStake = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
 */
proto.com.footyandsweep.Sweepstake.prototype.clearStake = function() {
  return this.setStake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.footyandsweep.Sweepstake.prototype.hasStake = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 totalNumberOfTickets = 14;
 * @return {number}
 */
proto.com.footyandsweep.Sweepstake.prototype.getTotalnumberoftickets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.footyandsweep.Sweepstake} returns this
 */
proto.com.footyandsweep.Sweepstake.prototype.setTotalnumberoftickets = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.footyandsweep.BigDecimal.prototype.toObject = function(opt_includeInstance) {
  return proto.com.footyandsweep.BigDecimal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.footyandsweep.BigDecimal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.BigDecimal.toObject = function(includeInstance, msg) {
  var f, obj = {
    scale: jspb.Message.getFieldWithDefault(msg, 1, 0),
    intVal: (f = msg.getIntVal()) && proto.com.footyandsweep.BigInteger.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.footyandsweep.BigDecimal}
 */
proto.com.footyandsweep.BigDecimal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.footyandsweep.BigDecimal;
  return proto.com.footyandsweep.BigDecimal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.footyandsweep.BigDecimal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.footyandsweep.BigDecimal}
 */
proto.com.footyandsweep.BigDecimal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScale(value);
      break;
    case 2:
      var value = new proto.com.footyandsweep.BigInteger;
      reader.readMessage(value,proto.com.footyandsweep.BigInteger.deserializeBinaryFromReader);
      msg.setIntVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.footyandsweep.BigDecimal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.footyandsweep.BigDecimal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.footyandsweep.BigDecimal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.BigDecimal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScale();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIntVal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.footyandsweep.BigInteger.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 scale = 1;
 * @return {number}
 */
proto.com.footyandsweep.BigDecimal.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.footyandsweep.BigDecimal} returns this
 */
proto.com.footyandsweep.BigDecimal.prototype.setScale = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional BigInteger int_val = 2;
 * @return {?proto.com.footyandsweep.BigInteger}
 */
proto.com.footyandsweep.BigDecimal.prototype.getIntVal = function() {
  return /** @type{?proto.com.footyandsweep.BigInteger} */ (
    jspb.Message.getWrapperField(this, proto.com.footyandsweep.BigInteger, 2));
};


/**
 * @param {?proto.com.footyandsweep.BigInteger|undefined} value
 * @return {!proto.com.footyandsweep.BigDecimal} returns this
*/
proto.com.footyandsweep.BigDecimal.prototype.setIntVal = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.footyandsweep.BigDecimal} returns this
 */
proto.com.footyandsweep.BigDecimal.prototype.clearIntVal = function() {
  return this.setIntVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.footyandsweep.BigDecimal.prototype.hasIntVal = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.footyandsweep.BigInteger.prototype.toObject = function(opt_includeInstance) {
  return proto.com.footyandsweep.BigInteger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.footyandsweep.BigInteger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.BigInteger.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.footyandsweep.BigInteger}
 */
proto.com.footyandsweep.BigInteger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.footyandsweep.BigInteger;
  return proto.com.footyandsweep.BigInteger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.footyandsweep.BigInteger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.footyandsweep.BigInteger}
 */
proto.com.footyandsweep.BigInteger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.footyandsweep.BigInteger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.footyandsweep.BigInteger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.footyandsweep.BigInteger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.BigInteger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.com.footyandsweep.BigInteger.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.com.footyandsweep.BigInteger.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.com.footyandsweep.BigInteger.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.com.footyandsweep.BigInteger} returns this
 */
proto.com.footyandsweep.BigInteger.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.footyandsweep.JoinCode.prototype.toObject = function(opt_includeInstance) {
  return proto.com.footyandsweep.JoinCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.footyandsweep.JoinCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.JoinCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    joincode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.footyandsweep.JoinCode}
 */
proto.com.footyandsweep.JoinCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.footyandsweep.JoinCode;
  return proto.com.footyandsweep.JoinCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.footyandsweep.JoinCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.footyandsweep.JoinCode}
 */
proto.com.footyandsweep.JoinCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJoincode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.footyandsweep.JoinCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.footyandsweep.JoinCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.footyandsweep.JoinCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.JoinCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJoincode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string joinCode = 1;
 * @return {string}
 */
proto.com.footyandsweep.JoinCode.prototype.getJoincode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.footyandsweep.JoinCode} returns this
 */
proto.com.footyandsweep.JoinCode.prototype.setJoincode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.footyandsweep.SweepstakeId.prototype.toObject = function(opt_includeInstance) {
  return proto.com.footyandsweep.SweepstakeId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.footyandsweep.SweepstakeId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.SweepstakeId.toObject = function(includeInstance, msg) {
  var f, obj = {
    sweepstakeid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.footyandsweep.SweepstakeId}
 */
proto.com.footyandsweep.SweepstakeId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.footyandsweep.SweepstakeId;
  return proto.com.footyandsweep.SweepstakeId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.footyandsweep.SweepstakeId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.footyandsweep.SweepstakeId}
 */
proto.com.footyandsweep.SweepstakeId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSweepstakeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.footyandsweep.SweepstakeId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.footyandsweep.SweepstakeId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.footyandsweep.SweepstakeId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.SweepstakeId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSweepstakeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sweepstakeId = 1;
 * @return {string}
 */
proto.com.footyandsweep.SweepstakeId.prototype.getSweepstakeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.footyandsweep.SweepstakeId} returns this
 */
proto.com.footyandsweep.SweepstakeId.prototype.setSweepstakeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.footyandsweep.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.com.footyandsweep.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.footyandsweep.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    pairsMap: (f = msg.getPairsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.footyandsweep.Map}
 */
proto.com.footyandsweep.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.footyandsweep.Map;
  return proto.com.footyandsweep.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.footyandsweep.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.footyandsweep.Map}
 */
proto.com.footyandsweep.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPairsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.footyandsweep.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.footyandsweep.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.footyandsweep.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPairsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<int64, string> pairs = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.com.footyandsweep.Map.prototype.getPairsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.com.footyandsweep.Map} returns this
 */
proto.com.footyandsweep.Map.prototype.clearPairsMap = function() {
  this.getPairsMap().clear();
  return this;};


/**
 * @enum {number}
 */
proto.com.footyandsweep.SweepstakeStatus = {
  OPEN: 0,
  ALLOCATED: 1,
  CLOSED: 2
};

/**
 * @enum {number}
 */
proto.com.footyandsweep.SweepstakeTypeCommon = {
  CORRECT_SCORE_FT: 0,
  CORRECT_SCORE_HT: 1
};

goog.object.extend(exports, proto.com.footyandsweep);

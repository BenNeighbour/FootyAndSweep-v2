// source: TicketService.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
var Common_pb = require('./Common_pb.js');
goog.object.extend(proto, Common_pb);
goog.exportSymbol('proto.com.footyandsweep.Ticket', null, global);
goog.exportSymbol('proto.com.footyandsweep.TicketList', null, global);
goog.exportSymbol('proto.com.footyandsweep.TicketStatus', null, global);
goog.exportSymbol('proto.com.footyandsweep.ticketstatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.footyandsweep.Ticket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.footyandsweep.Ticket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.footyandsweep.Ticket.displayName = 'proto.com.footyandsweep.Ticket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.footyandsweep.TicketList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.footyandsweep.TicketList.repeatedFields_, null);
};
goog.inherits(proto.com.footyandsweep.TicketList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.footyandsweep.TicketList.displayName = 'proto.com.footyandsweep.TicketList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.footyandsweep.Ticket.prototype.toObject = function(opt_includeInstance) {
  return proto.com.footyandsweep.Ticket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.footyandsweep.Ticket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.Ticket.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sweepstakeid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    allocationid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    iswinner: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    userid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.footyandsweep.Ticket}
 */
proto.com.footyandsweep.Ticket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.footyandsweep.Ticket;
  return proto.com.footyandsweep.Ticket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.footyandsweep.Ticket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.footyandsweep.Ticket}
 */
proto.com.footyandsweep.Ticket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.com.footyandsweep.TicketStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSweepstakeid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAllocationid(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswinner(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.footyandsweep.Ticket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.footyandsweep.Ticket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.footyandsweep.Ticket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.Ticket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSweepstakeid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAllocationid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIswinner();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.com.footyandsweep.Ticket.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.footyandsweep.Ticket} returns this
 */
proto.com.footyandsweep.Ticket.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TicketStatus status = 2;
 * @return {!proto.com.footyandsweep.TicketStatus}
 */
proto.com.footyandsweep.Ticket.prototype.getStatus = function() {
  return /** @type {!proto.com.footyandsweep.TicketStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.com.footyandsweep.TicketStatus} value
 * @return {!proto.com.footyandsweep.Ticket} returns this
 */
proto.com.footyandsweep.Ticket.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string sweepstakeId = 3;
 * @return {string}
 */
proto.com.footyandsweep.Ticket.prototype.getSweepstakeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.footyandsweep.Ticket} returns this
 */
proto.com.footyandsweep.Ticket.prototype.setSweepstakeid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string allocationId = 4;
 * @return {string}
 */
proto.com.footyandsweep.Ticket.prototype.getAllocationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.footyandsweep.Ticket} returns this
 */
proto.com.footyandsweep.Ticket.prototype.setAllocationid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool isWinner = 5;
 * @return {boolean}
 */
proto.com.footyandsweep.Ticket.prototype.getIswinner = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.footyandsweep.Ticket} returns this
 */
proto.com.footyandsweep.Ticket.prototype.setIswinner = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string userId = 6;
 * @return {string}
 */
proto.com.footyandsweep.Ticket.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.footyandsweep.Ticket} returns this
 */
proto.com.footyandsweep.Ticket.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.footyandsweep.TicketList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.footyandsweep.TicketList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.footyandsweep.TicketList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.footyandsweep.TicketList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.TicketList.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketList: jspb.Message.toObjectList(msg.getTicketList(),
    proto.com.footyandsweep.Ticket.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.footyandsweep.TicketList}
 */
proto.com.footyandsweep.TicketList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.footyandsweep.TicketList;
  return proto.com.footyandsweep.TicketList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.footyandsweep.TicketList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.footyandsweep.TicketList}
 */
proto.com.footyandsweep.TicketList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.footyandsweep.Ticket;
      reader.readMessage(value,proto.com.footyandsweep.Ticket.deserializeBinaryFromReader);
      msg.addTicket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.footyandsweep.TicketList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.footyandsweep.TicketList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.footyandsweep.TicketList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.footyandsweep.TicketList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.footyandsweep.Ticket.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Ticket ticket = 1;
 * @return {!Array<!proto.com.footyandsweep.Ticket>}
 */
proto.com.footyandsweep.TicketList.prototype.getTicketList = function() {
  return /** @type{!Array<!proto.com.footyandsweep.Ticket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.footyandsweep.Ticket, 1));
};


/**
 * @param {!Array<!proto.com.footyandsweep.Ticket>} value
 * @return {!proto.com.footyandsweep.TicketList} returns this
*/
proto.com.footyandsweep.TicketList.prototype.setTicketList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.footyandsweep.Ticket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.footyandsweep.Ticket}
 */
proto.com.footyandsweep.TicketList.prototype.addTicket = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.footyandsweep.Ticket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.footyandsweep.TicketList} returns this
 */
proto.com.footyandsweep.TicketList.prototype.clearTicketList = function() {
  return this.setTicketList([]);
};


/**
 * @enum {number}
 */
proto.com.footyandsweep.TicketStatus = {
  PENDING: 0,
  INPLAY: 1,
  REFUNDED: 2,
  WON: 3,
  LOST: 4
};


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `ticketstatus`.
 * @type {!jspb.ExtensionFieldInfo<string>}
 */
proto.com.footyandsweep.ticketstatus = new jspb.ExtensionFieldInfo(
    5000,
    {ticketstatus: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

google_protobuf_descriptor_pb.EnumValueOptions.extensionsBinary[5000] = new jspb.ExtensionFieldBinaryInfo(
    proto.com.footyandsweep.ticketstatus,
    jspb.BinaryReader.prototype.readString,
    jspb.BinaryWriter.prototype.writeString,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.EnumValueOptions.extensions[5000] = proto.com.footyandsweep.ticketstatus;

goog.object.extend(exports, proto.com.footyandsweep);
